#!groovy

import groovy.json.JsonSlurperClassic

@Library('ks-util')
import ks.Util

def verbosity = 0

/*
  Set global variables
*/

/* GITHUB PARAMS */
def gitconnection = [:]
gitconnection.baseurl =      "https://api.github.com/repos"
gitconnection.organization = "KohaSuomi"
gitconnection.repo =         "Koha-translations"
gitconnection.branch =       "testing"

ks.Util ks = new ks.Util(gitconnection, env, currentBuild, verbosity)

/*
  Available environment variables, see. https://wiki.jenkins-ci.org/display/JENKINS/Building+a+software+project
  invoke them with env.NODE_NAME
*/

//Check if the newest commit event is to the 'production' branch
def commitToProduction = ks.gh.isCommitInBranch('production')

ks.irc.sendIrcMsgPipelineStarted()
stage('Deploy CI') {
    def stageName = "Deploy CI"
    node {
        try {
            ks.irc.sendIrcMsgPipelineStageStarted(stageName)
            echo "\n###############################################################################\n###############################################################################\n    ####################     $stageName    ####################\n###############################################################################\n###############################################################################\n"

            sh ks.ansbileTorporInterfaceScriptPath + " deploy-translations koha_ci_"+(Integer.parseInt(env.EXECUTOR_NUMBER)+1)

            ks.irc.sendIrcMsgPipelineStageSuccess(stageName)

        } catch(e) {
            ks.currentBuild.result = 'FAILURE'
            ks.irc.sendIrcMsgPipelineStageFailure(stageName, e)
            throw e
        }
    }
}

stage('Deploy acceptance testing') {
    def stageName = "Deploy acceptance testing"
    if (! commitToProduction) {

    lock('deploy-to-acceptance-testing') { //Only one executor can deploy to prod at once
        node {
            try {
                ks.irc.sendIrcMsgPipelineStageStarted(stageName)
                echo "\n###############################################################################\n###############################################################################\n    ####################     $stageName    ####################\n###############################################################################\n###############################################################################\n"

                sh ks.ansbileTorporInterfaceScriptPath + " deploy-translations koha_ci_*"
    
                ks.currentBuild.result = 'SUCCESS'
    
                ks.irc.sendIrcMsgPipelineStageSuccess(stageName)
                ks.irc.sendIrcMsgPipelineSuccess()
    
            } catch(e) {
                ks.currentBuild.result = 'FAILURE'
                ks.irc.sendIrcMsgPipelineStageFailure(stageName, e)
                throw e
            }
        }
    }
    }
}

stage('Deploy production') {
    def stageName = "Deploy production"
    if (commitToProduction) {

    lock('deploy-to-production') { //Only one executor can deploy to prod at once
        node {
            try {
                ks.irc.sendIrcMsgPipelineStageStarted(stageName)
                echo "\n###############################################################################\n###############################################################################\n    ####################     $stageName    ####################\n###############################################################################\n###############################################################################\n"

                sh ks.ansbileTorporInterfaceScriptPath + " deploy-translations koha_productions"
    
                ks.currentBuild.result = 'SUCCESS'
    
                ks.irc.sendIrcMsgPipelineStageSuccess(stageName)
                ks.irc.sendIrcMsgPipelineSuccess()
    
            } catch(e) {
                ks.currentBuild.result = 'FAILURE'
                ks.irc.sendIrcMsgPipelineStageFailure(stageName, e)
                throw e
            }
        }
    }
    }
}

