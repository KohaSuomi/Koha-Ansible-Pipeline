#!groovy

import groovy.json.JsonSlurperClassic

@Library('ks-util')
import ks.Util
import ks.Git.Commit

def verbosity = 2

/*
  Set global variables
*/

/* GITHUB PARAMS */
def gitconnection = [:]
gitconnection.baseurl =      "https://api.github.com/repos"
gitconnection.organization = "KohaSuomi"
gitconnection.repo =         "Koha-translations"

ks.Util ks = new ks.Util(gitconnection, env, currentBuild, verbosity)

/*
 * Available environment variables, see. https://wiki.jenkins-ci.org/display/JENKINS/Building+a+software+project
 * invoke them with env.NODE_NAME
 */

/*
 *  Figure out is the build request targeted to the 'production' or the 'testing' branch?
 */

Boolean commitToProduction = false

ks.Git.Commit newestCommit = ks.gh.getNewestCommit()

/*
 * If commit is from koha-user, and is an automatic translation key update, skip this build.
 */
if (newestCommit.author =~ /(?i)koha/) {
  ks.currentBuild.result = 'SUCCESS'
  return true;
}


String branchToBuild;
if (ks.gh.isCommitInBranch(newestCommit, 'production')) {
  branchToBuild = 'production'
  commitToProduction = true
}
else {
  branchToBuild = 'master'
  commitToProduction = false
}
ks.setCommitToBuild( newestCommit, branchToBuild )


ks.irc.sendIrcMsgPipelineStarted()
stage('Deploy CI') {
  if (! commitToProduction) {

  def stageName = "Deploy CI"

  node {
    try {
      //ks.irc.sendIrcMsgPipelineStageStarted(stageName)
      echo "\n###############################################################################\n###############################################################################\n    ####################     $stageName    ####################\n###############################################################################\n###############################################################################\n"

      sh ks.ansbileTorporInterfaceScriptPath + " deploy-translations koha_translations"

      ks.irc.sendIrcMsgPipelineStageSuccess(stageName)

    } catch(e) {
      ks.currentBuild.result = 'FAILURE'
      ks.irc.sendIrcMsgPipelineStageFailure(stageName, e)
      throw e
    }
  } //end node
  } //end if
}

stage('Deploy acceptance testing') {
  if (! commitToProduction) {

  def stageName = "Deploy acceptance testing"

  node {
    try {
      //ks.irc.sendIrcMsgPipelineStageStarted(stageName)
      echo "\n###############################################################################\n###############################################################################\n    ####################     $stageName    ####################\n###############################################################################\n###############################################################################\n"

      sh ks.ansbileTorporInterfaceScriptPath + " deploy-translations koha_preproductions"

      ks.currentBuild.result = 'SUCCESS'

      ks.irc.sendIrcMsgPipelineStageSuccess(stageName)
      ks.irc.sendIrcMsgPipelineSuccess()

    } catch(e) {
      ks.currentBuild.result = 'FAILURE'
      ks.irc.sendIrcMsgPipelineStageFailure(stageName, e)
      throw e
    }
  } //end node
  } //end if
}

stage('Deploy production') {
  if (commitToProduction) {

  def stageName = "Deploy production"

  node {
    try {
      //ks.irc.sendIrcMsgPipelineStageStarted(stageName)
      echo "\n###############################################################################\n###############################################################################\n    ####################     $stageName    ####################\n###############################################################################\n###############################################################################\n"

      sh ks.ansbileTorporInterfaceScriptPath + " deploy-translations koha_productions"

      ks.currentBuild.result = 'SUCCESS'

      ks.irc.sendIrcMsgPipelineStageSuccess(stageName)
      ks.irc.sendIrcMsgPipelineSuccess()

    } catch(e) {
      ks.currentBuild.result = 'FAILURE'
      ks.irc.sendIrcMsgPipelineStageFailure(stageName, e)
      throw e
    }
  } //end node
  } //end if
}

